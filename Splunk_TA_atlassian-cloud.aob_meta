{"basic_builder": {"appname": "Splunk_TA_atlassian-cloud", "friendly_name": "Atlassian Cloud", "version": "1.0.0", "author": "Splunk-Nilesh", "description": "Get an audit log of events by Atlassian Cloud API", "theme": "#65A637", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABRtJREFUWEftmGlMVFcUx/933mwMSBhmYBhZY0ujUm2stWisSxdTBaygAZwBLZGm+sEmTRe7aIok2qRLYhOTFlNbkwpMAyJgqGm/ULSV9kNbrRGsxbbAUJZhm1JkmOXd28xQRgZ47w2DMX7wfZs55/zP755777n3PYJ5PObarl0gdDdj7BmvDJFx1W5ns6k6L48PVZaEGlhQZzVTRisE4vMtOclVoWiHBGSq/9MAyvWKJfSolLHVGcb+uUKFBGSus/KMUZloMkaugrAEgEQTsPrKnOTsYOBCAjLVdrCp4jqNHENjHgT8OS27xz2qqs5Lc0lBzQnIdNa6mRBawwDNVOGPNi3EqIvi0AXhWWSEHPwyO+ndeQPlVtkiFCpnP6NULSRWmZ3kMxXWd4KKlQmATKk8XZFp3C2kJVihLefbVFEu9QAYjRAb1Zp4DV5apfe5lF+z4/zNEakiAODzLTmLZt2FgkDT14lQlvVJ4dj3qM5vNtd1BgEEQK5YYtm68LfpzrMCmc9ZTzKeFkspp8WqoSAEB9bE+F2PNNvQahuXCgUhuFGZnbw4KCBTXacbjMmlVMu3JeGi9RY2JoX7Xd2U4flzVqlQn92SkzyjIDP+yK1qi5ErlDYpxS0PLMCuZVqf25CDR3QY5w85/F0ffh90SkkAnPJhy3PGlqmOM4AK6rsLKXWfllI7mZkAjWKiN1pa7DClRflD2oadKLnQJyUBhSos94uM2DOiQLsabLket0P0HNKFcTj+bLxf51BTL45sjAsAePF8l683iT0cZQvLd6T0iALlVrUo5YoI0XqfykqASn775HizsQeLdSoUPRLt1/61fxzvXRKf+aDWkFfRVNvh3buJQqObbISTdu9WV3IEp7YGhhSItgB2xZKTsiKoXbaz7u9EwjxBNhTJpTKrg17lUh/PSJ0xE4KNseCc1UF54eMiNIyJKJ7yG6p2LLo4m4bo4Wo621EGgr0BgYy5OTlW8zz5EYBCAMxNiGycMbpgmt0hU0XEVWToBM+XoE77wppWI5TaveVZcaUgxH98mms7vD0klU2CEeIBpW2W7SlLJ0Hy6jvWKsGll2+LPwbcjhWqcFBA85meucbeB5Kq2P0KBVWh3V/bjlKeGr3OjLFZq0YIYVNt039LJRKze7UA0lmeaThMzHXWRsbok/MRvIOxNSTYq+odTCoqde8CRao5jIzf/kbw4VNGvNYYcFUJGNnnWYnY0yB8VfVeTlYnhKO56xZ4BnAi+zlvaRSqWu0+fX+F9q2IRkWrHflLovBEYjhGnDw+vTKMV9L1eKGhC8c2GfGX3Q1OBhjC5dCp5fjk8iD2r9ShqMGKVx/TIyVaif3fdENGAL1GDtstjy+JhwFFy7V4PC4MZ278g0tdYyhZZ0Dp930o2xyPb9tHUdkyBShGI/dd1DNTI/Hxz4MYcHjw8io93m7qxRvpMbg+5ER6vAYHm/pwdKMB7//QjyMb4vB6Yw8OpOtRdnkIhcu06Bv14MTlQXhfja4PONE/NgEUpeawNiEcDTdHsCHJW7UxvLPOAAUB3mrqhTktKhCoZL0BpRf7wBgQFyFH8XItmPc9ZciJP+wuJEQosNKgRvuIG6laJexOCm0YBxfP8FOPA1dtDmQ9GIlBB4/q6xMjLV1vQKSKQ9kvg2gdcOKDp41w8wwV14ax/aFIjHgYuv91IzVSgWtDLnz1/wvmvbeozbWdPAMT/7Ry1/Y8xsnOs+17CCGf3a2cYnkYY8X/AQta50p7dULoAAAAAElFTkSuQmCC", "visible": false, "tab_version": "4.1.4", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "Atlassian-Cloud-API", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "getting_data_from_the_general_atlassian_cloud_api", "title": "Getting Data from the General Atlassian Cloud API", "description": "", "type": "customized", "parameters": [{"name": "org_id", "label": "Org_Id", "help_string": "", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": "k7d2b4kj-0748-1kbb-7a32-a23j1cc2537d"}, {"name": "from", "label": "From", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "Please enter UTC epoch time in milliseconds.", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "org_id", "title": "Org_Id", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "from", "title": "From", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "Please enter UTC epoch time in milliseconds."}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nfrom datetime import datetime,timedelta,timezone\n\n\n\ndef validate_input(helper, definition):\n    pass\n\n\n\ndef main_api_handler(helper,ew,params):\n    \n    params[\"limit\"] = 500 # The value in \"limit\" represents the number of events we want on each page.\n    \n    current_utc_time = datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%S.%fZ\")\n\n    data = UTC_time_to_epoch(current_utc_time)\n    # There is a value in \"data\" that represents the current UTC time converted into epoch time in milliseconds\n    if(params[\"to\"] > data):\n        params[\"to\"] = data\n        \n    \n    to_value = None\n    if 'cursor' in params:\n        to_value = params.pop('to', None)\n    \n    global_access_token = helper.get_global_setting(\"access_token\")\n    opt_org_id = helper.get_arg('org_id')\n    url = f'https://api.atlassian.com/admin/v1/orgs/{opt_org_id}/events'\n\n    \n    headers = {\"Accept\": \"application/json\",\"Authorization\": f'Bearer {global_access_token}'}\n    \n    res = requests.get(url=url, headers=headers, params=params)\n\n    if to_value is not None:\n        params[\"to\"] = to_value\n        \n    r_json = res.json()\n    \n    # if r_json != 200:\n    #     res.raise_for_status()\n\n    if len(r_json[\"data\"]) == 0:\n        result_params = add_minutes_to_epoch(params[\"to\"])\n        main_api_handler(helper,ew,result_params)\n    else:\n        check_point_handler(helper,ew,params,r_json)\n        \ndef check_point_handler(helper,ew,params,r_json):\n    \n    key = \"{}_Atlassian_audit_logs\".format(helper.get_input_stanza_names())\n    \n    helper.save_check_point(key,params[\"to\"])\n    \n    for item in r_json[\"data\"]:\n        write_data_handler(helper,ew,item)\n        \n    if r_json[\"meta\"][\"next\"] is not None:\n        result_params = {\"cursor\":r_json[\"meta\"][\"next\"],\"to\":params[\"to\"]}\n        main_api_handler(helper,ew,result_params)\n    else:\n        result_params = add_minutes_to_epoch(params[\"to\"])\n        main_api_handler(helper,ew,result_params)\n    \ndef write_data_handler(helper,ew,res):\n    \n    event = helper.new_event(json.dumps(res), time=None, host=None, index=helper.get_output_index(), source=None, sourcetype=None, done=True, unbroken=True)\n    ew.write_event(event)\n        \ndef UTC_time_to_epoch(original_date_string):\n    utc_datetime = datetime.strptime(original_date_string, \"%Y-%m-%dT%H:%M:%S.%fZ\").replace(tzinfo=timezone.utc)\n    return int(utc_datetime.timestamp() * 1000)\n    \ndef add_minutes_to_epoch(value):\n    distance_minutes = 1440  # This value in distance_minutes represents the desired time interval or distance between the 'from' time and the 'to' time.\n    from_time = int(value)\n    to_time = from_time + (distance_minutes * 60 * 1000)\n    \n    return {\"from\":from_time,\"to\":to_time}\n    \ndef collect_events(helper,ew):\n    \n    # opt_from = helper.get_arg('from') \n    \n    params = {}\n\n    key = \"{}_Atlassian_audit_logs\".format(helper.get_input_stanza_names())\n    \n    if helper.get_check_point(key) is None:\n        from_value = helper.get_arg('from')\n        \n        current_utc_time = datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%S.%fZ\")\n        to_value = UTC_time_to_epoch(current_utc_time)\n        \n        params = {\"from\":from_value,\"to\":to_value}\n        main_api_handler(helper,ew,params)\n\n    else:\n        from_value = helper.get_check_point(key)\n        params = add_minutes_to_epoch(from_value)\n        main_api_handler(helper,ew,params)\n        \n    # timestamp_str = \"2024-02-21T07:47:38.473000Z\" #1708501658473\n    # params = add_minutes_to_epoch(UTC_time_to_epoch(timestamp_str))\n    \n    \n", "customized_options": [{"name": "from", "value": "1708501658473"}], "uuid": "a1ce99ac27d84bd5996a2b28d4627ac3", "sample_count": "0"}]}, "field_extraction_builder": {"Atlassian-Cloud-API": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "customized_settings": [{"required": true, "name": "access_token", "label": "Access_Token", "placeholder": "Access Token", "default_value": "", "help_string": "", "type": "password", "format_type": "password", "value": ""}]}}, "sourcetype_builder": {"Atlassian-Cloud-API": {"metadata": {"event_count": 0, "data_input_name": "getting_data_from_the_general_atlassian_cloud_api", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1710295917_34", "progress": 1.0}}